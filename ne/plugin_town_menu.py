from compiler import *
register_plugin()
require_plugin('plugin_ms_extension', 'plugin_presentations')



CV_PRESENTATION  =  0
CV_BANDITS       =  1
CV_ASSASSINS     =  2
CV_INFILTRATORS  =  3
CV_CASTLE        =  4
CV_STREETS       =  5
CV_TAVERN        =  6
CV_SHOP          =  7
CV_ARENA         =  8
CV_DUNGEON       =  9
CV_COURTYARD     = 10
CV_ENTERPRISE    = 11
CV_ALLEY         = 12
CV_MERCHANT_HOME = 13
CV_RETURN        = 14
CV_MENU          = 15
CV_TOURNAMENT    = 16


# "$town_entered" - to be handled at presentation level, no need to set it everywhere

injection = {
	'town_menu_interception': [
		(assign, "$center_visit_action", 0),
		(jump_to_menu, "mnu_town_ne"),
		(eq, 1, 0),
	]
}

presentations = [
	("center_visit", 0, mesh.ui_bg_mp_bg, [
		(ti_on_presentation_load, [
			(presentation_set_duration, 999999),
			(set_fixed_point_multiplier, 1000),
			(ui_create_mesh, reg0, "mesh_ui_white_plane", 0, 0, 200, 750),
			(overlay_set_color, reg0, 0xffc0c0c0),
			(ui_create_mesh, reg0, "mesh_ui_white_plane", 200, 0, 800, 75),
			(ui_create_mesh, reg0, "mesh_ui_white_plane", 200, 75, 400, 225),
			(overlay_set_color, reg0, 0xffffc0c0),
			(ui_create_mesh, reg0, "mesh_ui_white_plane", 600, 75, 400, 225),
			(overlay_set_color, reg0, 0xffc0ffc0),
			(ui_create_mesh, reg0, "mesh_ui_white_plane", 800, 300, 200, 450),

			(try_begin),
				(party_slot_eq, "$current_town", slot_party_type, spt_town),
				(store_sub, ":mesh", "$current_town", "p_town_1"),
				(val_add, ":mesh", mesh.pic_town_bw_01),
				(ui_create_mesh, "$g_inside_obj_3", ":mesh", 200, 300, 600, 400),
				(val_add, ":mesh", mesh.pic_town_color_01 - mesh.pic_town_bw_01),
				(ui_create_mesh, "$g_inside_obj_4", ":mesh", 200, 300, 600, 400),
				(overlay_set_alpha, "$g_inside_obj_4", 0), # Fully transparent
				(overlay_set_additional_render_height, "$g_inside_obj_4", 11),
			(else_try),
				(assign, "$g_inside_obj_4", -1),
				(party_get_current_terrain, ":cur_terrain", "$current_town"),
				(party_slot_eq, "$current_town", slot_party_type, spt_castle),
				(try_begin),
					(this_or_next|eq, ":cur_terrain", rt_steppe),
					(this_or_next|eq, ":cur_terrain", rt_steppe_forest),
					(this_or_next|eq, ":cur_terrain", rt_desert),
					(             eq, ":cur_terrain", rt_desert_forest),
					(assign, ":mesh", "mesh_pic_castledes"),
				(else_try),
					(this_or_next|eq, ":cur_terrain", rt_snow),
					(             eq, ":cur_terrain", rt_snow_forest),
					(assign, ":mesh", "mesh_pic_castlesnow"),
				(else_try),
					(assign, ":mesh", "mesh_pic_castle1"),
				(try_end),
				(ui_create_mesh, "$g_inside_obj_3", ":mesh", 50, 140, 750, 750),
			(else_try),
				(try_begin),
					(this_or_next|eq, ":cur_terrain", rt_steppe),
					(this_or_next|eq, ":cur_terrain", rt_steppe_forest),
					(this_or_next|eq, ":cur_terrain", rt_desert),
					(             eq, ":cur_terrain", rt_desert_forest),
					(assign, ":mesh", "mesh_pic_village_s"),
				(else_try),
					(this_or_next|eq, ":cur_terrain", rt_snow),
					(             eq, ":cur_terrain", rt_snow_forest),
					(assign, ":mesh", "mesh_pic_village_w"),
				(else_try),
					(assign, ":mesh", "mesh_pic_village_p"),
				(try_end),
				(ui_create_mesh, "$g_inside_obj_3", ":mesh", 50, 140, 750, 750),
			(try_end),
			(overlay_set_alpha, "$g_inside_obj_3", 0), # Fully transparent
			(overlay_animate_to_alpha, "$g_inside_obj_3", 1500, 255), # Appears slowly
			(overlay_set_additional_render_height, "$g_inside_obj_3", 10),
			(str_store_party_name, s10, "$g_encountered_party"),
			(ui_create_label, reg0, s10, 500, 700, tf_center_justify, 2000),
			(overlay_set_color, reg0, 0xff200000),
			(ui_create_game_button, "$g_inside_obj_1", "@Leave", 900, 20),
			(ui_create_game_button, "$g_inside_obj_2", "@Visit", 725, 20),
			(assign, "$temp", 0),
			(assign, "$temp_2", -1),
		]),
		(ti_on_presentation_event_state_change, [
			(store_trigger_param_1, ":overlay_id"),
			(try_begin),
				(eq, ":overlay_id", "$g_inside_obj_1"),
				(assign, "$center_visit_action", CV_RETURN),
				(presentation_set_duration, 0),
			(else_try),
				(eq, ":overlay_id", "$g_inside_obj_2"),
				(assign, "$center_visit_action", CV_STREETS),
				(presentation_set_duration, 0),
			(try_end),
		]),
		(ti_on_presentation_mouse_press, [
			(set_fixed_point_multiplier, 1000),
			(store_trigger_param_1, ":overlay_id"),
			(try_begin),
				(eq, ":overlay_id", "$g_inside_obj_4"),
				(try_begin),
					(init_position, pos0),
					(init_position, pos1),
					(position_set_x, pos1, 1000),
					(position_set_y, pos1, 750),
					(overlay_animate_to_position, "$g_inside_obj_3", 250, pos0),
					(overlay_animate_to_position, "$g_inside_obj_4", 250, pos0),
					(overlay_animate_to_size, "$g_inside_obj_3", 250, pos1),
					(overlay_animate_to_size, "$g_inside_obj_4", 250, pos1),
					(overlay_animate_to_alpha, "$g_inside_obj_4", 250, 255),
					(store_add, "$temp_2", "$temp", 250), # launch mission after 250 ms
				(try_end),
			(try_end),
		]),
		(ti_on_presentation_mouse_enter_leave, [
			(store_trigger_param_1, ":overlay_id"),
			(store_trigger_param_2, ":event"),
			(try_begin),
				(eq, ":overlay_id", "$g_inside_obj_4"),
				(try_begin),
					(eq, ":event", 0),
					(overlay_animate_to_alpha, "$g_inside_obj_4", 150, 128),
				(else_try),
					(overlay_animate_to_alpha, "$g_inside_obj_4", 150, 0),
				(try_end),
			(try_end),
		]),
		(ti_on_presentation_run, [
			(store_trigger_param_1, "$temp"),
			(gt, "$temp_2", 0),
			(ge, "$temp", "$temp_2"),
			(assign, "$center_visit_action", CV_STREETS),
			(presentation_set_duration, 0),
		]),
	]),
]

game_menus = [

	("town_ne", mnf_disable_all_keys, "{!}Hidden", "none", [
		# Basic operations
		(store_encountered_party, "$current_town"),
		(call_script, "script_update_center_recon_notes", "$current_town"),
		(set_passage_menu, "mnu_town_ne"),

		# Check for siege defence and redirect to siege menu if necessary
		(assign, "$g_defending_against_siege", 0),
		(str_clear, s3),
		(party_get_battle_opponent, ":besieger_party", "$current_town"),
		(store_faction_of_party, ":encountered_faction", "$g_encountered_party"),
		(store_relation, ":faction_relation", ":encountered_faction", "fac_player_supporters_faction"),
		(try_begin),
			(gt, ":besieger_party", 0),
			(ge, ":faction_relation", 0),
			(store_faction_of_party, ":besieger_party_faction", ":besieger_party"),
			(store_relation, ":besieger_party_relation", ":besieger_party_faction", "fac_player_supporters_faction"),
			(lt, ":besieger_party_relation", 0),
			(assign, "$g_defending_against_siege", 1),
			(assign, "$g_siege_first_encounter", 1),
			(jump_to_menu, "mnu_siege_started_defender"),
		(try_end),

		# Check for quests and redirect to quest menu if necessary
		(assign, "$qst_collect_taxes_currently_collecting", 0),
		(try_begin),
			(gt, "$quest_auto_menu", 0),
			(jump_to_menu, "$quest_auto_menu"),
			(assign, "$quest_auto_menu", 0),
		(try_end),

		(assign, "$talk_context", 0),
		(assign,"$all_doors_locked",0),

		# TODO: perhaps implement leaving town via "$g_center_visit_action" instead of a separate variable?
		(try_begin),
			(eq, "$g_leave_town", 1),
(display_message, "@Leaving town via $g_leave_town global.", 0xffff0000),
			(assign, "$g_leave_town", 0),
			(assign, "$g_permitted_to_center", 0), # TODO: apparently deprecated
			(leave_encounter),
			(change_screen_return),
		(try_end),

		(try_begin),
			(eq, "$center_visit_action", CV_RETURN),
(display_message, "@Leaving town via CV_RETURN option.", 0xffff0000),
			(leave_encounter),
			(change_screen_return),
		(else_try),
			(eq, "$center_visit_action", CV_PRESENTATION),
(display_message, "@Running new town presentation.", 0xffff0000),
			(start_presentation, "prsnt_center_visit"),
		(else_try),
			(eq, "$center_visit_action", CV_MENU),
(display_message, "@Going to another menu via CV_MENU option.", 0xffff0000),
			(assign, "$center_visit_action", CV_PRESENTATION),
			(jump_to_menu, "$center_visit_param"),
		(else_try),
			(eq, "$center_visit_action", CV_BANDITS), # Town bandits at night
			# TODO
		(else_try),
			(eq, "$center_visit_action", CV_ASSASSINS), # Assassins in the streets/courtyard
			# TODO
		(else_try),
			(eq, "$center_visit_action", CV_INFILTRATORS), # Assassins in castle's keep
			# TODO
		(else_try),
			(eq, "$center_visit_action", CV_CASTLE),
			(assign, "$center_visit_action", CV_PRESENTATION),
			(call_script, "script_enter_court", "$current_town"),
		(else_try),
			(eq, "$center_visit_action", CV_STREETS),
(display_message, "@Entering town streets via CV_STREETS option.", 0xffff0000),
			(assign, "$center_visit_action", CV_PRESENTATION),
			(party_get_slot, ":scene", "$current_town", slot_town_center),
			(call_script, "script_town_enter_streets", ":scene"),
			(change_screen_mission),
		(else_try),
			(eq, "$center_visit_action", CV_TAVERN),
			(assign, "$center_visit_action", CV_PRESENTATION),
			(call_script, "script_town_enter_tavern"),
			(change_screen_mission),
		(else_try),
			(eq, "$center_visit_action", CV_SHOP),
			(assign, "$center_visit_action", CV_PRESENTATION),
			(set_jump_mission, "mt_town_default"),
			(mission_tpl_entry_set_override_flags, "mt_town_default", 0, af_override_horse),
			(try_begin),
				(eq, "$sneaked_into_town",1),
				(mission_tpl_entry_set_override_flags, "mt_town_default", 0, af_override_all),
			(try_end),
			(party_get_slot, ":cur_scene", "$current_town", slot_town_store),
			(jump_to_scene, ":cur_scene"),
			(scene_set_slot, ":cur_scene", slot_scene_visited, 1),
			(change_screen_mission),
		(else_try),
			(eq, "$center_visit_action", CV_ARENA),
			(assign, "$center_visit_action", CV_PRESENTATION),
			(party_get_slot, ":arena_scene", "$current_town", slot_town_arena),
			(scene_set_slot, ":arena_scene", slot_scene_visited, 1),
			(call_script, "script_town_enter_arena", ":arena_scene"),
		(else_try),
			(eq, "$center_visit_action", CV_TOURNAMENT),
			(assign, "$center_visit_action", CV_PRESENTATION),
			# Mark scene as visited
			(party_get_slot, ":arena_scene", "$current_town", slot_town_arena),
			(scene_set_slot, ":arena_scene", slot_scene_visited, 1),
			(call_script, "script_town_enter_tournament"),
		(else_try),
			(eq, "$center_visit_action", CV_DUNGEON),
			(assign, "$center_visit_action", CV_PRESENTATION),
			(call_script, "script_enter_dungeon", "$current_town", "mt_visit_town_castle"), # vanilla script
		(else_try),
			(eq, "$center_visit_action", CV_COURTYARD),
			(assign, "$center_visit_action", CV_PRESENTATION),
			(party_get_slot, ":cur_castle_exterior", "$current_town", slot_castle_exterior),
			(call_script, "script_town_enter_courtyard", ":cur_castle_exterior", ),
			(set_jump_entry, 1), # Always force entry through entry point 1 when entering via menu
			(change_screen_mission),
		(else_try),
			(eq, "$center_visit_action", CV_ENTERPRISE),
			(assign, "$center_visit_action", CV_PRESENTATION),
			# TODO
		#(else_try),
		#	(eq, "$center_visit_action", CV_ALLEY),
		#	(assign, "$center_visit_action", CV_PRESENTATION),
		#	# TODO
		#(else_try),
		#	(eq, "$center_visit_action", CV_MERCHANT_HOME),
		#	(assign, "$center_visit_action", CV_RETURN),
		#	# TODO
		#(else_try),
		#	(eq, "$center_visit_action", CV_),
		#(else_try),
		#	(eq, "$center_visit_action", CV_),
		#(else_try),
		#	(eq, "$center_visit_action", CV_),
		#(else_try),
		#	(eq, "$center_visit_action", CV_),
		(else_try),
			(assign, reg99, "$center_visit_action"),
			(display_message, "@Illegal CVA code: {reg99}. Guards are enraged that you've caused this and kick you out!"),
			(leave_encounter),
			(change_screen_return),
		(try_end),

	], [

		# TOWN MENU PASSAGES

		("passage_00_castle", [], "{!}Town/castle keep.", [
(display_message, "@new menu passage 0 activated", 0xffff0000),
			(try_begin),
				(this_or_next|eq, "$all_doors_locked", 1),
				(eq, "$sneaked_into_town", 1),           
				(display_message,"str_door_locked",0xFFFFAAAA),
			(else_try),
				(this_or_next|neq, "$players_kingdom", "$g_encountered_party_faction"),
				(neg|troop_slot_ge, "trp_player", slot_troop_renown, 50),
				(neg|troop_slot_ge, "trp_player", slot_troop_renown, 125),
				(neq, "$g_player_eligible_feast_center_no", "$current_town"),			 
				(faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_state, sfai_feast),
				(faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_object, "$g_encountered_party"),
				(neg|check_quest_active, "qst_wed_betrothed"),
				(neg|check_quest_active, "qst_wed_betrothed_female"),
				(neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin), #Married players always make the cut
				(display_message, "@There is a feast in progress, and you were not invited.", 0xFFFFAAAA),
			(else_try),
				(assign, "$town_entered", 1),              
				(call_script, "script_enter_court", "$current_town"),
			(try_end),
		], "Door to the castle."),

		("passage_01_unused", [], "{!}Unused passage #01", [
(display_message, "@new menu passage 1 activated", 0xffff0000),
			(display_message, "@UNUSED PASSAGE #01", 0xff0000),
		], "UNUSED PASSAGE #01."),

		("passage_02_castle", [], "{!}Town/castle keep.", [
(display_message, "@new menu passage 2 activated", 0xffff0000),
			(try_begin),
				(this_or_next|eq, "$all_doors_locked", 1),
				(eq, "$sneaked_into_town", 1),           
				(display_message,"str_door_locked",0xFFFFAAAA),
			(else_try),
				(this_or_next|neq, "$players_kingdom", "$g_encountered_party_faction"),
				(neg|troop_slot_ge, "trp_player", slot_troop_renown, 50),
				(neg|troop_slot_ge, "trp_player", slot_troop_renown, 125),
				(neq, "$g_player_eligible_feast_center_no", "$current_town"),			 
				(faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_state, sfai_feast),
				(faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_object, "$g_encountered_party"),
				(neg|check_quest_active, "qst_wed_betrothed"),
				(neg|check_quest_active, "qst_wed_betrothed_female"),
				(neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin), #Married players always make the cut
				(display_message, "@There is a feast in progress, and you were not invited.", 0xFFFFAAAA),
			(else_try),
				(assign, "$town_entered", 1),              
				(call_script, "script_enter_court", "$current_town"),
			(try_end),
		], "Door to the castle."),

		("passage_03_streets", [], "{!}Town streets", [
(display_message, "@new menu passage 3 activated", 0xffff0000),
			#If the player is fighting his or her way out
			(try_begin),
				(eq, "$talk_context", tc_prison_break),
				(assign, "$talk_context", tc_escape),
				(assign, "$g_mt_mode", tcm_escape),
				(store_faction_of_party, ":town_faction", "$current_town"),
				(faction_get_slot, ":tier_2_troop", ":town_faction", slot_faction_tier_3_troop),
				(faction_get_slot, ":tier_3_troop", ":town_faction", slot_faction_tier_3_troop),
				(faction_get_slot, ":tier_4_troop", ":town_faction", slot_faction_tier_4_troop),
				(party_get_slot, ":scene", "$current_town", slot_town_center),
				(modify_visitors_at_site, ":scene"),
				(reset_visitors),
				#ideally we could alarm troops at locations
				(try_begin), 
					#if guards have not gone to some other important happening at nearby villages, then spawn 4 guards. (example : fire)
					(party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),                          
					(store_current_hours, ":cur_time"),
					(store_add, ":fire_finish_time", ":last_nearby_fire_time", fire_duration),
					(neg|is_between, ":cur_time", ":last_nearby_fire_time", ":fire_finish_time"),
					(store_time_of_day, ":cur_day_hour"),
					(try_begin), #there are 6 guards at day time (no fire ext)
						(ge, ":cur_day_hour", 6),
						(lt, ":cur_day_hour", 22),
						(set_visitors, 25, ":tier_2_troop", 2),
						(set_visitors, 26, ":tier_2_troop", 1),
						(set_visitors, 27, ":tier_3_troop", 2),
						(set_visitors, 28, ":tier_4_troop", 1),
					(else_try),  #only 4 guards because of night
						(set_visitors, 25, ":tier_2_troop", 1),
						(set_visitors, 26, ":tier_2_troop", 1),
						(set_visitors, 27, ":tier_3_troop", 1),
						(set_visitors, 28, ":tier_4_troop", 1),
					(try_end),
				(else_try),
					#if guards have gone to some other important happening at nearby villages, then spawn only 1 guard. (example : fire)
					(store_time_of_day, ":cur_day_hour"),
					(try_begin), #only 2 guard because there is a fire at one owned village
						(ge, ":cur_day_hour", 6),
						(lt, ":cur_day_hour", 22),
						(set_visitors, 25, ":tier_2_troop", 1),
						(set_visitors, 26, ":tier_2_troop", 0),
						(set_visitors, 27, ":tier_3_troop", 1),
						(set_visitors, 28, ":tier_4_troop", 0),
					(else_try), #only 1 guard because both night and there is a fire at one owned village
						(set_visitors, 25, ":tier_2_troop", 1),
						(set_visitors, 26, ":tier_2_troop", 0),
						(set_visitors, 27, ":tier_3_troop", 0),
						(set_visitors, 28, ":tier_4_troop", 0),
					(try_end),                   
				(try_end),
				(set_jump_mission,"mt_town_center"),
				(jump_to_scene, ":scene"),
				#If you're already at escape, then talk context will reset
			(else_try),
				(call_script, "script_town_enter_streets", ":scene"),
			(try_end),
			(change_screen_mission),
		], "Door to the town center."),

		("passage_04_tavern", [], "{!}Tavern", [
(display_message, "@new menu passage 4 activated", 0xffff0000),
			(try_begin),
				(eq,"$all_doors_locked",1),
				(display_message,"str_door_locked",0xFFFFAAAA),
			(else_try),
				(party_get_slot, ":scene", "$current_town", slot_town_tavern),
				(call_script, "script_town_enter_tavern", ":scene"),
			(try_end),
			(change_screen_mission),
		], "Door to the tavern."),

		("passage_05_shop", [], "{!}General merchant's shop", [
(display_message, "@new menu passage 5 activated", 0xffff0000),
			(try_begin),
				(this_or_next|eq,"$all_doors_locked",1),
				(eq,"$town_nighttime",1),
				(display_message,"str_door_locked",0xFFFFAAAA),
			(else_try),
				(set_jump_mission, "mt_town_default"),
				(mission_tpl_entry_set_override_flags, "mt_town_default", 0, af_override_horse),
				(try_begin),
					(eq, "$sneaked_into_town",1),
					(mission_tpl_entry_set_override_flags, "mt_town_default", 0, af_override_all),
				(try_end),
				(party_get_slot, ":cur_scene", "$current_town", slot_town_store),
				(jump_to_scene, ":cur_scene"),
				(scene_set_slot, ":cur_scene", slot_scene_visited, 1),
				(change_screen_mission),
			(try_end),
		], "Door to the shop."),

		("passage_06_arena", [], "{!}Arena or Tournament", [
(display_message, "@new menu passage 6 activated", 0xffff0000),
			(party_get_slot, ":arena_scene", "$current_town", slot_town_arena),
			(scene_set_slot, ":arena_scene", slot_scene_visited, 1),
			(try_begin),
				(this_or_next|eq,"$all_doors_locked",1),
				(eq,"$town_nighttime",1),
				(display_message,"str_door_locked",0xFFFFAAAA),
			(else_try),
				(party_slot_ge, "$current_town", slot_town_has_tournament, 1),
				(change_screen_return), # leave town center mission before proceeding
				(call_script, "script_town_enter_tournament"),
			(else_try),
				(call_script, "script_town_enter_arena", ":arena_scene"),
			(try_end),
		], "Door to the arena."),

		("passage_07_dungeon", [], "{!}Dungeon", [
(display_message, "@new menu passage 7 activated", 0xffff0000),
			(try_begin),
				(eq, "$talk_context", tc_prison_break),
				(gt, "$g_main_attacker_agent", 0),
				(neg|agent_is_alive, "$g_main_attacker_agent"),
				(agent_get_troop_id, ":agent_type", "$g_main_attacker_agent"),
				(try_begin),
					(eq, "$g_encountered_party_faction", "fac_player_supporters_faction"),
					(party_get_slot, ":prison_guard_faction", "$current_town", slot_center_original_faction),
				(else_try),
					(assign, ":prison_guard_faction", "$g_encountered_party_faction"),
				(try_end),
				(faction_slot_eq, ":prison_guard_faction", slot_faction_prison_guard_troop, ":agent_type"),
				(call_script, "script_deduct_casualties_from_garrison"),
				(call_script, "script_enter_dungeon", "$current_town", "mt_visit_town_castle"),
			(else_try),
				(neq,"$all_doors_locked",1),
				(this_or_next|party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
				(eq, "$g_encountered_party_faction", "$players_kingdom"),
				(call_script, "script_enter_dungeon", "$current_town", "mt_visit_town_castle"),
			(else_try),
				(display_message,"str_door_locked",0xFFFFAAAA),
			(try_end),
		], "Door to the dungeon."),

		("passage_08_courtyard", [], "{!}Castle courtyard", [
(display_message, "@new menu passage 8 activated", 0xffff0000),
			(party_get_slot, ":scene", "$current_town", slot_castle_exterior),
			(try_begin),
				(eq, "$talk_context", tc_prison_break),
				(store_script_param, ":cur_castle_exterior", 1),
				(modify_visitors_at_site,":cur_castle_exterior"),
				(reset_visitors),
				(assign, "$talk_context", tc_escape),
				(assign, ":guard_no", 40),
				(party_get_num_companion_stacks, ":num_stacks", "$g_encountered_party"),
				(try_for_range, ":troop_iterator", 0, ":num_stacks"),
					#nearby fire condition start
					(party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),
					(store_current_hours, ":cur_time"),
					(store_add, ":fire_finish_time", ":last_nearby_fire_time", fire_duration),  
					(this_or_next|eq, ":guard_no", 40),
					(neg|is_between, ":cur_time", ":last_nearby_fire_time", ":fire_finish_time"),
					#nearby fire condition end
					(lt, ":guard_no", 47),
					(party_stack_get_troop_id, ":cur_troop_id", "$g_encountered_party", ":troop_iterator"),
					(neg|troop_is_hero, ":cur_troop_id"),
					(party_stack_get_size, ":stack_size","$g_encountered_party",":troop_iterator"),
					(party_stack_get_num_wounded, ":num_wounded","$g_encountered_party",":troop_iterator"),
					(val_sub, ":stack_size", ":num_wounded"),
					(gt, ":stack_size", 0),
					(party_stack_get_troop_dna,":troop_dna", "$g_encountered_party", ":troop_iterator"),
					(set_visitor, ":guard_no", ":cur_troop_id", ":troop_dna"),
					(val_add, ":guard_no", 1),
				(try_end),                      
				#(set_jump_entry, 7),
				#(set_visitor, 7, "$g_player_troop"), # <<< was this, temporarily disabled
				(set_jump_mission,"mt_castle_visit"),
				(jump_to_scene, ":cur_castle_exterior"),
			(else_try),
				(call_script, "script_town_enter_courtyard", ":scene"),
			(try_end),
			(change_screen_mission),
			#If you're already at escape, then talk context will reset            
		], "To the castle courtyard."),

	]),

]


scripts = [

	("town_enter_tournament", [
		(call_script, "script_fill_tournament_participants_troop", "$current_town", 1),
		(assign, "$g_tournament_cur_tier", 0),
		(assign, "$g_tournament_player_team_won", -1),
		(assign, "$g_tournament_bet_placed", 0),
		(assign, "$g_tournament_bet_win_amount", 0),
		(assign, "$g_tournament_last_bet_tier", -1),
		(assign, "$g_tournament_next_num_teams", 0),
		(assign, "$g_tournament_next_team_size", 0),
		(jump_to_menu, "mnu_town_tournament"),
	]),

	("town_enter_arena", [
		(store_script_param, ":arena_scene", 1),
		(assign, "$center_visit_action", CV_PRESENTATION),
		(assign, "$g_mt_mode", abm_visit),
		(assign, "$town_entered", 1),
		(set_jump_mission, "mt_arena_melee_fight"),
		(modify_visitors_at_site, ":arena_scene"),
		(reset_visitors),
		(set_visitor, 43, "trp_veteran_fighter"),
		(set_visitor, 44, "trp_hired_blade"),
		(set_jump_entry, 50),
		(jump_to_scene, ":arena_scene"),
		(change_screen_mission),
	]),

	("town_enter_courtyard", [
		(store_script_param, ":cur_castle_exterior", 1),
		(modify_visitors_at_site, ":cur_castle_exterior"),
		(reset_visitors),
		(assign, "$talk_context", tc_town_talk),
		(assign, "$g_mt_mode", tcm_default),
		(try_begin),
			(neq, "$g_encountered_party_faction", "fac_player_supporters_faction"),
			(faction_get_slot, ":troop_prison_guard", "$g_encountered_party_faction", slot_faction_prison_guard_troop),
			(else_try),
			(party_get_slot, ":town_original_faction", "$current_town", slot_center_original_faction),
			(faction_get_slot, ":troop_prison_guard", ":town_original_faction", slot_faction_prison_guard_troop),
		(try_end),
		(set_visitor, 24, ":troop_prison_guard"),
		(assign, ":guard_no", 40),
		(party_get_num_companion_stacks, ":num_stacks", "$g_encountered_party"),
		(try_for_range, ":troop_iterator", 0, ":num_stacks"),
			#nearby fire condition start
			(party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),
			(store_current_hours, ":cur_time"),
			(store_add, ":fire_finish_time", ":last_nearby_fire_time", fire_duration),  
			(neg|is_between, ":cur_time", ":fire_finish_time", ":last_nearby_fire_time"),
			(lt, ":guard_no", 47),
			(party_stack_get_troop_id, ":cur_troop_id", "$g_encountered_party", ":troop_iterator"),
			(neg|troop_is_hero, ":cur_troop_id"),
			(party_stack_get_size, ":stack_size","$g_encountered_party",":troop_iterator"),
			(party_stack_get_num_wounded, ":num_wounded","$g_encountered_party",":troop_iterator"),
			(val_sub, ":stack_size", ":num_wounded"),
			(gt, ":stack_size", 0),
			(party_stack_get_troop_dna,":troop_dna","$g_encountered_party",":troop_iterator"),
			(set_visitor, ":guard_no", ":cur_troop_id", ":troop_dna"),
			(val_add, ":guard_no", 1),
		(try_end),
		#(try_begin),
		#	(eq, "$town_entered", 0),
		#	(assign, "$town_entered", 1),
		#(try_end),
		(assign, ":override_state", af_override_horse),             
		(try_begin),
			(eq, "$sneaked_into_town", 1), #setup disguise
			(assign, ":override_state", af_override_all),
		(try_end),
		(mission_tpl_entry_set_override_flags, "mt_castle_visit", 0, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_castle_visit", 1, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_castle_visit", 2, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_castle_visit", 3, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_castle_visit", 4, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_castle_visit", 5, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_castle_visit", 6, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_castle_visit", 7, ":override_state"),           
		(set_jump_mission,"mt_castle_visit"),
		(jump_to_scene, ":cur_castle_exterior"),
	]),

	("town_enter_streets", [
		(store_script_param, ":town_scene", 1),
		# Prepare town streets for player's visit
		(party_get_slot, ":town_scene", "$current_town", slot_town_center),
		(modify_visitors_at_site, ":town_scene"),
		(reset_visitors),
		(assign, "$g_mt_mode", tcm_default),
		(store_faction_of_party, ":town_faction","$current_town"),
		(try_begin),
			(neq, ":town_faction", "fac_player_supporters_faction"),
			(faction_get_slot, ":troop_prison_guard", "$g_encountered_party_faction", slot_faction_prison_guard_troop),
			(faction_get_slot, ":troop_castle_guard", "$g_encountered_party_faction", slot_faction_castle_guard_troop),
			(faction_get_slot, ":tier_2_troop", ":town_faction", slot_faction_tier_2_troop),
			(faction_get_slot, ":tier_3_troop", ":town_faction", slot_faction_tier_3_troop),
		(else_try),
			(party_get_slot, ":town_original_faction", "$current_town", slot_center_original_faction),
			(faction_get_slot, ":troop_prison_guard", ":town_original_faction", slot_faction_prison_guard_troop),
			(faction_get_slot, ":troop_castle_guard", ":town_original_faction", slot_faction_castle_guard_troop),
			(faction_get_slot, ":tier_2_troop", ":town_original_faction", slot_faction_tier_2_troop),
			(faction_get_slot, ":tier_3_troop", ":town_original_faction", slot_faction_tier_3_troop),
		(try_end),
		(try_begin), #think about this, should castle guard have to go nearby fire too? If he do not go, killing 2 armored guard is too hard for player. For now he goes too.
			#if guards have not gone to some other important happening at nearby villages, then spawn 4 guards. (example : fire)
			(party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),
			(store_current_hours, ":cur_time"),
			(store_add, ":fire_finish_time", ":last_nearby_fire_time", fire_duration),
			(neg|is_between, ":cur_time", ":last_nearby_fire_time", ":fire_finish_time"),
			(set_visitor, 23, ":troop_castle_guard"),
		(try_end),
		(set_visitor, 24, ":troop_prison_guard"),
		(try_begin),
			(gt,":tier_2_troop", 0),
			(assign,reg0,":tier_3_troop"),
			(assign,reg1,":tier_3_troop"),
			(assign,reg2,":tier_2_troop"),
			(assign,reg3,":tier_2_troop"),
		(else_try),
			(assign,reg0,"trp_vaegir_lineman"),
			(assign,reg1,"trp_vaegir_marksman"),
			(assign,reg2,"trp_vaegir_sergeant"),
			(assign,reg3,"trp_vaegir_footman"),
		(try_end),
		(shuffle_range,0,4),
		(try_begin),
			#if guards have not gone to some other important happening at nearby villages, then spawn 4 guards. (example : fire)
			(party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),
			(store_current_hours, ":cur_time"),
			(store_add, ":fire_finish_time", ":last_nearby_fire_time", fire_duration),
			(neg|is_between, ":cur_time", ":last_nearby_fire_time", ":fire_finish_time"),
			(set_visitor,25,reg0),
			(set_visitor,26,reg1),
			(set_visitor,27,reg2),
			(set_visitor,28,reg3),
		(try_end),
		(party_get_slot, ":spawned_troop", "$current_town", slot_town_armorer),
		(set_visitor, 9, ":spawned_troop"),
		(party_get_slot, ":spawned_troop", "$current_town", slot_town_weaponsmith),
		(set_visitor, 10, ":spawned_troop"),
		(party_get_slot, ":spawned_troop", "$current_town", slot_town_elder),
		(set_visitor, 11, ":spawned_troop"),
		(party_get_slot, ":spawned_troop", "$current_town", slot_town_horse_merchant),
		(set_visitor, 12, ":spawned_troop"),
		(call_script, "script_init_town_walkers"),
		(set_jump_mission,"mt_town_center"),
		(assign, ":override_state", af_override_horse),
		(try_begin),
			(eq, "$sneaked_into_town", 1), #setup disguise
			(assign, ":override_state", af_override_all),
		(try_end),
		(mission_tpl_entry_set_override_flags, "mt_town_center", 0, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_town_center", 2, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_town_center", 3, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_town_center", 4, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_town_center", 5, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_town_center", 6, ":override_state"),
		(mission_tpl_entry_set_override_flags, "mt_town_center", 7, ":override_state"),
		(jump_to_scene, ":town_scene"),
	]),

	("town_enter_tavern", [
		(set_jump_mission, "mt_town_default"),
		(mission_tpl_entry_set_override_flags, "mt_town_default", 0, af_override_horse),
		(try_begin),
			(eq, "$sneaked_into_town",1),
			(mission_tpl_entry_set_override_flags, "mt_town_default", 0, af_override_all),
		(try_end),
		(party_get_slot, ":cur_scene", "$current_town", slot_town_tavern),
		(jump_to_scene, ":cur_scene"),
		(scene_set_slot, ":cur_scene", slot_scene_visited, 1),
		(assign, "$talk_context", tc_tavern_talk),
		(call_script, "script_initialize_tavern_variables"),
		(store_random_in_range, ":randomize_attacker_placement", 0, 4),
		# Visitors
		(modify_visitors_at_site, ":cur_scene"),
		(reset_visitors),
		(assign, ":cur_entry", 17),
		# Attacker?
		(try_begin),
			(eq, ":randomize_attacker_placement", 0),
			(call_script, "script_setup_tavern_attacker", ":cur_entry"),
			(val_add, ":cur_entry", 1),
		(try_end),
		# Mercenary?
		(party_get_slot, ":mercenary_troop", "$current_town", slot_center_mercenary_troop_type),
		(party_get_slot, ":mercenary_amount", "$current_town", slot_center_mercenary_troop_amount),
		(try_begin),
			(gt, ":mercenary_troop", 0),
			(gt, ":mercenary_amount", 0),
			(set_visitor, ":cur_entry", ":mercenary_troop"),
			(val_add, ":cur_entry", 1),
		(try_end),
		# Second attempt to place attacker (TODO: improve)
		(try_begin),
			(eq, ":randomize_attacker_placement", 1),
			(call_script, "script_setup_tavern_attacker", ":cur_entry"),
			(val_add, ":cur_entry", 1),
		(try_end),
		# Companions
		(try_for_range, ":companion_candidate", companions_begin, companions_end),
			(troop_slot_eq, ":companion_candidate", slot_troop_occupation, 0),
			(troop_slot_eq, ":companion_candidate", slot_troop_cur_center, "$current_town"),
			(neg|troop_slot_ge, ":companion_candidate", slot_troop_prisoner_of_party, centers_begin),
			(set_visitor, ":cur_entry", ":companion_candidate"),
			(val_add, ":cur_entry", 1),
		(try_end),
		# Third attempt to place attacker (TODO: improve)
		(try_begin),
			(eq, ":randomize_attacker_placement", 2),
			(call_script, "script_setup_tavern_attacker", ":cur_entry"),
			(val_add, ":cur_entry", 1),
		(try_end),
		# Random broker
		(try_begin), #this doubles the incidence of ransom brokers and (below) minstrels
			(party_get_slot, ":ransom_broker", "$current_town", slot_center_ransom_broker),
			(gt, ":ransom_broker", 0),
			(assign, reg0, ":ransom_broker"),
			(assign, reg1, "$current_town"),
			(set_visitor, ":cur_entry", ":ransom_broker"),
			(val_add, ":cur_entry", 1),
		(else_try),
			(is_between, "$g_talk_troop", ransom_brokers_begin, ransom_brokers_end),
			(store_add, ":alternative_town", "$current_town", 9),
			(try_begin),
				(ge, ":alternative_town", towns_end),
				(val_sub, ":alternative_town", 22),
			(try_end),
			(party_get_slot, ":ransom_broker", ":alternative_town", slot_center_ransom_broker),
			(gt, ":ransom_broker", 0),
			(set_visitor, ":cur_entry", ":ransom_broker"),
			(val_add, ":cur_entry", 1),
		(try_end),
		# Traveler
		(try_begin),
			(party_get_slot, ":tavern_traveler", "$current_town", slot_center_tavern_traveler),
			(gt, ":tavern_traveler", 0),
			(set_visitor, ":cur_entry", ":tavern_traveler"),
			(val_add, ":cur_entry", 1),
		(try_end),
		# Minstrel
		(try_begin),
			(party_get_slot, ":tavern_minstrel", "$current_town", slot_center_tavern_minstrel),
			(gt, ":tavern_minstrel", 0),
			(set_visitor, ":cur_entry", ":tavern_minstrel"),
			(val_add, ":cur_entry", 1),
		(else_try),  
			(store_add, ":alternative_town", "$current_town", 9),
			(try_begin),
				(ge, ":alternative_town", towns_end),
				(val_sub, ":alternative_town", 22),
			(try_end),
			(party_get_slot, ":tavern_minstrel", ":alternative_town", slot_center_tavern_minstrel),			   
			(gt, ":tavern_minstrel", 0),
			(set_visitor, ":cur_entry", ":tavern_minstrel"),
			(val_add, ":cur_entry", 1),
		(try_end),
		# Bookseller
		(try_begin),
			(party_get_slot, ":tavern_bookseller", "$current_town", slot_center_tavern_bookseller),
			(gt, ":tavern_bookseller", 0),
			(set_visitor, ":cur_entry", ":tavern_bookseller"),
			(val_add, ":cur_entry", 1),
		(try_end),
		# Fourth attempt to place attacker (TODO: improve)
		(try_begin),
			(eq, ":randomize_attacker_placement", 3),
			(call_script, "script_setup_tavern_attacker", ":cur_entry"),
			(val_add, ":cur_entry", 1),
		(try_end),
		# Farmer with a quest
		(try_begin),
			(neg|check_quest_active, "qst_eliminate_bandits_infesting_village"),
			(neg|check_quest_active, "qst_deal_with_bandits_at_lords_village"),
			(assign, ":end_cond", villages_end),
			(try_for_range, ":cur_village", villages_begin, ":end_cond"),
				(party_slot_eq, ":cur_village", slot_village_bound_center, "$current_town"),
				(party_slot_ge, ":cur_village", slot_village_infested_by_bandits, 1),
				(neg|party_slot_eq, ":cur_village", slot_town_lord, "trp_player"),
				(set_visitor, ":cur_entry", "trp_farmer_from_bandit_village"),
				(val_add, ":cur_entry", 1),
				(assign, ":end_cond", 0),
			(try_end),
		(try_end),
		# Starting merchant
		(try_begin),
			(eq, "$g_starting_town", "$current_town"),
			(this_or_next|neg|check_quest_finished, "qst_collect_men"),
			(this_or_next|neg|check_quest_finished, "qst_learn_where_merchant_brother_is"),
			(this_or_next|neg|check_quest_finished, "qst_save_relative_of_merchant"),
			(this_or_next|neg|check_quest_finished, "qst_save_town_from_bandits"),
			(eq,  "$g_do_one_more_meeting_with_merchant", 1),
			(assign, ":troop_of_merchant", 0),	
			(try_begin),
				(eq, "$g_encountered_party_faction", "fac_kingdom_1"),
				(assign, ":troop_of_merchant", "trp_swadian_merchant"),
			(else_try),  
				(eq, "$g_encountered_party_faction", "fac_kingdom_2"),
				(assign, ":troop_of_merchant", "trp_vaegir_merchant"),
			(else_try),                   
				(eq, "$g_encountered_party_faction", "fac_kingdom_3"),
				(assign, ":troop_of_merchant", "trp_khergit_merchant"),
			(else_try),  
				(eq, "$g_encountered_party_faction", "fac_kingdom_4"),
				(assign, ":troop_of_merchant", "trp_nord_merchant"),
			(else_try),  
				(eq, "$g_encountered_party_faction", "fac_kingdom_5"),
				(assign, ":troop_of_merchant", "trp_rhodok_merchant"),
			(else_try),  
				(eq, "$g_encountered_party_faction", "fac_kingdom_6"),
				(assign, ":troop_of_merchant", "trp_sarranid_merchant"),
			(try_end),
			(gt, ":troop_of_merchant", 0),	
			(set_visitor, ":cur_entry", ":troop_of_merchant"),
			(val_add, ":cur_entry", 1),
		(try_end),                         
	]),

]

meshes = [
	("pic_town_bw_01", 0, "lav_pic_town_bw_01", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_02", 0, "lav_pic_town_bw_02", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_03", 0, "lav_pic_town_bw_03", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_04", 0, "lav_pic_town_bw_04", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_05", 0, "lav_pic_town_bw_05", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_06", 0, "lav_pic_town_bw_06", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_07", 0, "lav_pic_town_bw_07", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_08", 0, "lav_pic_town_bw_08", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_09", 0, "lav_pic_town_bw_09", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_10", 0, "lav_pic_town_bw_10", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_11", 0, "lav_pic_town_bw_11", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_12", 0, "lav_pic_town_bw_12", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_13", 0, "lav_pic_town_bw_13", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_14", 0, "lav_pic_town_bw_14", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_15", 0, "lav_pic_town_bw_15", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_16", 0, "lav_pic_town_bw_16", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_17", 0, "lav_pic_town_bw_17", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_18", 0, "lav_pic_town_bw_18", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_19", 0, "lav_pic_town_bw_19", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_20", 0, "lav_pic_town_bw_20", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_21", 0, "lav_pic_town_bw_21", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_bw_22", 0, "lav_pic_town_bw_22", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_01", 0, "lav_pic_town_color_01", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_02", 0, "lav_pic_town_color_02", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_03", 0, "lav_pic_town_color_03", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_04", 0, "lav_pic_town_color_04", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_05", 0, "lav_pic_town_color_05", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_06", 0, "lav_pic_town_color_06", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_07", 0, "lav_pic_town_color_07", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_08", 0, "lav_pic_town_color_08", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_09", 0, "lav_pic_town_color_09", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_10", 0, "lav_pic_town_color_10", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_11", 0, "lav_pic_town_color_11", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_12", 0, "lav_pic_town_color_12", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_13", 0, "lav_pic_town_color_13", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_14", 0, "lav_pic_town_color_14", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_15", 0, "lav_pic_town_color_15", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_16", 0, "lav_pic_town_color_16", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_17", 0, "lav_pic_town_color_17", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_18", 0, "lav_pic_town_color_18", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_19", 0, "lav_pic_town_color_19", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_20", 0, "lav_pic_town_color_20", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_21", 0, "lav_pic_town_color_21", 0, 0, 0, 0, 0, 0, 1, 1, 1),
	("pic_town_color_22", 0, "lav_pic_town_color_22", 0, 0, 0, 0, 0, 0, 1, 1, 1),
]

SOMESTUFF = [

        # Setup music
        # IMPLEMENT: inside the presentation init code
        (try_begin),
          (eq, "$sneaked_into_town", 1),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town_infiltrate),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
        (try_end),

        # Detect that trade goods assessment was in progress
        # IMPLEMENT: use code:
        #   (assign, "$auto_enter_town", "$current_town"),
        #   (assign, "$center_visit_action", CV_MENU),
        #   (assign, "$center_visit_param", "mnu_town_trade_assessment"),
        (try_begin),
          (eq, "$g_town_assess_trade_goods_after_rest", 1),
          (assign, "$g_town_assess_trade_goods_after_rest", 0),
          (jump_to_menu,"mnu_town_trade_assessment"),
        (try_end),

        # Town re-entry after resting: perhaps set $town_entered BEFORE resting?
        (try_begin),
          (eq, "$g_town_visit_after_rest", 1),
          (assign, "$g_town_visit_after_rest", 0),
          (assign, "$town_entered", 1),
        (try_end),

        #Adding all taxes to player if player is the owner of the town
        (try_begin),
          (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
          (party_slot_eq,"$current_town",slot_party_type, spt_town),
          (try_for_range, ":town_no", centers_begin, centers_end),
            (party_slot_eq, ":town_no", slot_town_lord, "trp_player"),
            (party_get_slot, ":accumulated_rents", ":town_no", slot_center_accumulated_rents),
            (gt, ":accumulated_rents", 0),
            (jump_to_menu, "mnu_all_center_tax"),
          (try_end),
        (try_end),

        #Adding tax to player if player is the owner of the castle
        (try_begin),
          (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
          (party_slot_eq,"$current_town",slot_party_type, spt_castle),
          (party_get_slot, ":accumulated_rents", "$current_town", slot_center_accumulated_rents),
          (gt, ":accumulated_rents", 0),
          (jump_to_menu, "mnu_center_tax"),
        (try_end),

        ## Allow lords in prison at this town to challenge the player to a duel - Jinnai
        (try_begin),
          (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
          (party_slot_eq,"$current_town",slot_party_type, spt_town),
		  #Josef v585 - duels can interrupt quests where you wait in a town
		  (neg|check_quest_active, "qst_bar_brawl"),
		  (neg|check_quest_active, "qst_kill_local_merchant"),
		  (neg|check_quest_active, "qst_follow_spy"),
		  #end Josef
          (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
            (this_or_next|troop_slot_eq, ":troop_no", slot_troop_prisoner_of_party, "$current_town"),
            (troop_slot_eq, ":troop_no", slot_troop_prisoner_of_party, "p_main_party"),
            (troop_slot_eq, ":troop_no", slot_troop_requested_duel, 0),
            (store_troop_health,":hp",":troop_no"),
            (ge,":hp",80),
            (store_random_in_range,":rand",1,101),
            (le,":rand",10),
            (troop_set_slot, ":troop_no", slot_troop_requested_duel, 1),
            (assign,"$temp",":troop_no"),
            (assign,"$g_tournament_player_team_won",-1),
            (jump_to_menu, "mnu_duel_requested"),
          (try_end),
        (try_end),

        # Special handling for sneaked in player
        (str_clear, s13),
        (try_begin), 
          (gt,"$entry_to_town_forbidden",0),
          (str_store_string, s13, "@ You have successfully sneaked in."),
        (try_end),

        # Detecting day/night and keeping that information for later scene generation
        (try_begin), 
          (store_time_of_day,reg(12)),
          (ge,reg(12),5),
          (lt,reg(12),21),
          (assign,"$town_nighttime",0),
        (else_try),
          (assign,"$town_nighttime",1),
          (party_slot_eq,"$current_town",slot_party_type, spt_town),
          (str_store_string, s13, "str_town_nighttime"),
        (try_end),

        # Tournament detection
        (try_begin),
          (party_slot_ge, "$current_town", slot_town_has_tournament, 1),
          (neg|is_currently_night),
          (party_set_slot, "$current_town", slot_town_has_tournament, 1),
          (str_store_string, s13, "@{s13} A tournament will be held here soon."),
        (try_end),

        # Detecting undefended centers (can wait even if hostile, can take over etc)
        (assign,"$castle_undefended",0),
        (party_get_num_companions, ":castle_garrison_size", "p_collective_enemy"),
        (try_begin),
          (eq,":castle_garrison_size",0),
          (assign,"$castle_undefended",1),
        (try_end),

        # NE has assassin checks in castle keeps, but not in town keeps
        (try_begin),
        (party_slot_eq, "$current_town", slot_town_lord, "trp_player"), #for castles, only have assassin attacks in own castle
        (call_script, "script_cf_enter_center_location_assassin_check", 0),		   
        (else_try),
        (assign, "$town_entered", 1),
        (call_script, "script_enter_court", "$current_town"),
        (try_end),

        # Force player to spawn on entry #1 for first time if it's not night (will spawn on 0 at night or after first entry)
        (try_begin),
          (eq, "$town_entered", 0),
          (assign, "$town_entered", 1),
          (eq, "$town_nighttime", 0),
          (set_jump_entry, 1),
        (try_end),

		# This determines whether or not a lord who dislikes you will commission an assassin
		# Normally used in tavern code before call to "script_setup_tavern_attacker"
		(try_begin),
			(store_current_hours, ":hours"),
			(store_sub, ":hours_since_last_attempt", ":hours", "$g_last_assassination_attempt_time"),
			(gt, ":hours_since_last_attempt", 168),
			(try_for_range, ":lord", active_npcs_begin, active_npcs_end),
				(troop_slot_eq, ":lord", slot_lord_reputation_type, lrep_debauched),
				(troop_get_slot, ":led_party", ":lord", slot_troop_leaded_party),
				(party_is_active, ":led_party"),
				(party_get_attached_to, ":led_party_attached", ":led_party"), 
				(eq, ":led_party_attached", "$g_encountered_party"),
				(call_script, "script_troop_get_relation_with_troop", "trp_player", ":lord"),
				(lt, reg0, -20),
				(assign, "$g_last_assassination_attempt_time", ":hours"),
				(troop_set_slot, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party"),					
			(try_end),
		(try_end),	
]
